*
Using document.write() after an HTML document is fully loaded, will delete all existing HTML:
JavaScript statements are separated by semicolons:

*
The XOR operator outputs a 1 whenever the inputs do not match, which occurs when one of the two inputs is exclusively true. This is the same as addition mod 2. Here is the truth table:
0 XOR 0 = 0
0 XOR 1 = 1
1 XOR 0 = 1
1 XOR 1 = 0

*
The debugger keyword stops the execution of JavaScript, and calls (if available) the debugging function.
var x = 15 * 5;
debugger;
document.getElementbyId("demo").innerHTML = x; 

*
document.getElementById(id).onclick = function(){code} 	Adding event handler code to an onclick event

*
document.anchors 	Returns all <a> elements that have a name attribute
Same all the elements of JS are accessible. Different functions are there for the same.

*
var y = x.getElementsByTagName("p"); 

*
If you want to find all HTML elements that matches a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.

This example returns a list of all <p> elements with class="intro".
Example
var x = document.querySelectorAll("p.intro");

*
document.getElementById("myImage").src = "landscape.jpg";


*
<div onmouseover="mOver(this)" onmouseout="mOut(this)


*
element.addEventListener(event, function, useCapture);
element.addEventListener("click", function(){ alert("Hello World!"); });
you can add multiple events to a single element 



*



Event Bubbling or Event Capturing?

There are two ways of event propagation in the HTML DOM, bubbling and capturing.

Event propagation is a way of defining the element order when an event occurs. If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's "click" event should be handled first?

In bubbling the inner most element's event is handled first and then the outer: the <p> element's click event is handled first, then the <div> element's click event.

In capturing the outer most element's event is handled first and then the inner: the <div> element's click event will be handled first, then the <p> element's click event.

With the addEventListener() method you can specify the propagation type by using the "useCapture" parameter:
addEventListener(event, function, useCapture);

The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.
Example
document.getElementById("myP").addEventListener("click", myFunction, true);


*
 <div id="div1">
<p id="p1">This is a paragraph.</p>
<p id="p2">This is another paragraph.</p>
</div>

<script>
var para = document.createElement("p");
var node = document.createTextNode("This is new.");
para.appendChild(node);

var element = document.getElementById("div1");
element.appendChild(para);
</script>

*


*


*
